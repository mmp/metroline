name: build-osx

on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-14 ]

    name: Build ${{ matrix.os }}

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Setup go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        cache-dependency-path: go.sum

    - name: Build universal binary
      run: |
        CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -tags static -o metroline_amd64 .
        CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -tags static -o metroline_arm64 .
        lipo -create -output metroline metroline_amd64 metroline_arm64

    - name: Check Secrets
    # The secrets aren't available for PRs but we don't want the build to fail just because of that...
      run: |
         if [ -z "${{ secrets.APPLE_DEVELOPER_ID_CERT_PASSWORD }}" ]; then
             echo "SECRETS_AVAILABLE=false" >> $GITHUB_ENV
         else
             echo "SECRETS_AVAILABLE=true" >> $GITHUB_ENV
         fi

    - name: Set up keychain for signing binary
      if: env.SECRETS_AVAILABLE == 'true'
      env:
        APPLE_DEVELOPER_ID_CERT_PASSWORD: ${{ secrets.APPLE_DEVELOPER_ID_CERT_PASSWORD }}
        APPLE_DEVELOPER_ID_CERT_FILE: ${{ secrets.APPLE_DEVELOPER_ID_CERT_FILE }}
        # https://medium.com/anchore-engineering/developers-need-to-handle-macos-binary-signing-how-we-automated-the-solution-part-2-ad1e08caff0f
      run: |
        EPHEMERAL_KEYCHAIN="ci-ephemeral-keychain"
        EPHEMERAL_KEYCHAIN_PASSWORD="$(openssl rand -base64 100)"
        security create-keychain -p "${EPHEMERAL_KEYCHAIN_PASSWORD}" "${EPHEMERAL_KEYCHAIN}"
        EPHEMERAL_KEYCHAIN_FULL_PATH="$HOME/Library/Keychains/${EPHEMERAL_KEYCHAIN}-db"
        echo ${APPLE_DEVELOPER_ID_CERT_FILE} | base64 -d > cert.p12
        security import ./cert.p12 -k "${EPHEMERAL_KEYCHAIN_FULL_PATH}" -P ${APPLE_DEVELOPER_ID_CERT_PASSWORD} -T "$(command -v codesign)"
        security -q set-key-partition-list -S "apple-tool:,apple:" -s -k "${EPHEMERAL_KEYCHAIN_PASSWORD}" "${EPHEMERAL_KEYCHAIN_FULL_PATH}"
        security default-keychain -d "user" -s "${EPHEMERAL_KEYCHAIN_FULL_PATH}"

    - name: Sign Binary
      if: env.SECRETS_AVAILABLE == 'true'
      env:
        APPLE_DEVELOPER_ID_APPLICATION: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION }}
      run: |
        codesign -s "${APPLE_DEVELOPER_ID_APPLICATION}" -f -v --timestamp --options runtime metroline

    - name: Create DMG
      run: |
        brew install create-dmg
        mkdir dmg
        cp metroline dmg/metroline.1m.cgo
        create-dmg metroline.dmg dmg

    - name: Notarize Binary
      if: env.SECRETS_AVAILABLE == 'true'
      env:
        APPLE_CODESIGN_PASSWORD: ${{ secrets.APPLE_CODESIGN_PASSWORD }}
        APPLE_CODESIGN_ID: ${{ secrets.APPLE_CODESIGN_ID }}
        APPLE_TEAMID: ${{ secrets.APPLE_TEAMID }}
      run: |
        # get the dmg file notarized
        xcrun notarytool submit \
            --wait \
            --apple-id ${APPLE_CODESIGN_ID} \
            --password ${APPLE_CODESIGN_PASSWORD} \
            --team-id ${APPLE_TEAMID} \
            --timeout 30m \
            metroline.dmg
        # notarized! staple the notarization
        xcrun stapler staple metroline.dmg

    - name: Save dmg file as build artifact
      uses: actions/upload-artifact@v4
      with:
        name: metroline.dmg
        path: metroline.dmg

    - name: Rename zip for release (maybe)
      if: startsWith(github.ref, 'refs/tags/')
      run: mv metroline.dmg 'metroline-${{ github.ref_name }}.dmg'

    - name: Upload release (maybe)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: 'metroline-${{ github.ref_name }}.dmg'
